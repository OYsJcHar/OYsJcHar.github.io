{"meta":{"title":"OBslcogar","subtitle":null,"description":"For knowledge","author":"OYsJcHar","url":"http://yoursite.com","root":"/"},"pages":[{"title":"","date":"2019-12-09T12:50:27.166Z","updated":"2019-12-09T12:50:27.166Z","comments":true,"path":"board/index.html","permalink":"http://yoursite.com/board/index.html","excerpt":"","text":"helloworld 该文件在hexo/source文件夹里"},{"title":"","date":"2019-12-16T12:05:49.928Z","updated":"2019-12-09T12:51:23.072Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"helloworld 该文件在hexo/source文件夹里"},{"title":"categories","date":"2019-10-07T12:32:17.000Z","updated":"2019-10-07T12:32:17.287Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"一些实用技巧总结（持续更新）","slug":"skill","date":"2019-12-24T01:53:32.000Z","updated":"2019-12-24T07:02:48.397Z","comments":true,"path":"2019/12/24/skill/","link":"","permalink":"http://yoursite.com/2019/12/24/skill/","excerpt":"","text":"DOS批处理命令批量将图片改为.jpg格式打开记事本，在记事本里面输入ren . *.jpg批处理命令。这条命令的作用是将文件里的所有文件重命名为.jpg的图片文件，然后保存在需要修改文件的当前文件夹下，并且将这个文件改为后缀是.bat的批处理文件。之后双击批处理文件就可以完成文件的批量改文件的格式了。 批量给图片（其他文件）改名最普遍的方法是全选图片文件-&gt;按住ctrl-&gt;在第一个图片上右键重命名-&gt;修改-&gt;鼠标点击别处这个时候文件也就都改名了，不过批量改名之后的结果是结尾带着(1)、(2)这种，写在markdown里很不方便也很不美观，查询得知也可以使用BAT命令： 1234567@echo off&amp;setlocal EnableDelayedExpansion set a=1 for /f \"delims=\" %%i in ('dir /b *.jpg') do ( if not \"%%~ni\"==\"%~n0\" (if !a! LSS 10 (ren \"%%i\" \"list0! a!.jpg\") else ren \"%%i\" \"list!a!.jpg\" set/a a+=1 ) ) 同样，写在新建文件里，重命名为ren.bat，文件里的list可以改成想改的名字。如果是其他的文件类型就改成其他的文件后缀。 批量删除一个类型的文件del *.txt*批量删除txt文件，需要这个操作主要是因为我把图片放在word里另存为html来导出图片的时候，图片会分别存在png、jpg两种格式..我不得不删掉一种格式。","categories":[],"tags":[{"name":"技巧","slug":"技巧","permalink":"http://yoursite.com/tags/技巧/"}]},{"title":"Bugku_web题解(本文章将持续更新)","slug":"bugku_web","date":"2019-12-23T08:32:23.000Z","updated":"2019-12-24T06:58:43.825Z","comments":true,"path":"2019/12/23/bugku_web/","link":"","permalink":"http://yoursite.com/2019/12/23/bugku_web/","excerpt":"","text":"14 管理员系统是一个登陆的页面，F12检查元素的时候看见了一行base64注释，解密为test123,应该管理员的密码。根据提示：IP禁止访问，请联系本地管理员登陆，IP已被记录.应该想到X-Forwarded-For: 简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP 所以我们伪造一个XFF头，伪装成本地登录就可以了：X-Forwarded-For:127.0.0.1可以在header里添加，也可以直接在框中写，然后send to repeater-&gt;go就出现flag了 13 网站被黑先拿御剑扫一波后台。扫到/shell.php，访问需要密码，尝试弱密码无效之后开始爆破。抓包-&gt;send to intruder-&gt;选择simple list-&gt;自带的密码-&gt;start attack发现了长度不同的字符，这也就是密码了。输入就可以得到flag。 12 头等舱抓包-&gt;send to repeater-&gt;go。 11 web5打开发现是一个提交窗口首先查看源码，发现了奇怪的字符这里就到本题要点：jjencode 和 aaencode（颜文字） 什么是jjencode? 将JS代码转换成只有符号的字符串什么是aaencode？ 将JS代码转换成常用的网络表情可以直接利用浏览器的控制台输入密文，执行后即可解密。不要忘记题目最后要求大写。 10 变量1首先分析源码 preg_match()函数是正则表达式判断 \\w表示任意一个单词字符，即[a-zA-Z0-9_] ,+将前面的字符匹配一次或多次，$/结尾所以我们不能构造eval()等函数。不过在var_dump($$args)中，args作为了可变变量,简单理解可以认为是$($args)，可以构造超全局变量$GLOBALS,$GLOBALS [一个包含了全部变量的全局组合数组] 我们构造args=GLOBALS，就得到flag了 区分global和$GLOBALS[]：前者为变量实体 后者为别名引用 12345678&lt;?php $var1 = 1; function test()&#123; unset($GLOBALS['var1']); &#125; test(); echo $var1; ?&gt; 因为$var1被删除了，所以什么东西都没有打印。 123456789&lt;?php$var1 = 1;function test()&#123;global $var1;unset($var1);&#125;test();echo $var1;?&gt; 意外的打印了1。 证明删除的只是别名，$GLOBALS[‘var’]的引用，起本身的值没有受到任何的改变。` 09 本地包含这个题我打不开。。 08 你必须让他停下这个题抓包就可以了，抓到包之后。send to repeater-&gt; go n次（频率的原因不一定几次 十五次之内大概）就可以在右侧得到flag了。 07 域名解析修改：C:\\Windows\\System32\\drivers\\etc 路径下的host文件。在最下面一行加入：123.206.87.240 flag.baidu.com保存后在浏览器访问：http://flag.baidu.com/ 就能看到flag了。 06 web3这道题会一直弹出JS对话框，查看源码会发现注释有问题，该格式为unicode编码，转换一下就可以了。unicode在线转化 05 矛盾该题主要是利is_numeric()函数的漏洞以及PHP的“==”0是弱类型比较（数值相等就可以了），所以构造1加上字符串来传参就可以。eg:1x 1abc。 04 web基础$_POST根据源码构造post传参即可。 03 web基础$_GET根据源码构造get传参即可。 1?变量名=变量值 02 计算器修改maxlength 也就是输入框的长度，修改成验证码的长度就可以了。 01 web2F12检察源码即可。","categories":[{"name":"CTF","slug":"CTF","permalink":"http://yoursite.com/categories/CTF/"}],"tags":[{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"}]},{"title":"Hexo博客的使用及markdown的语法","slug":"title","date":"2019-12-11T13:04:23.000Z","updated":"2019-12-24T02:48:11.217Z","comments":true,"path":"2019/12/11/title/","link":"","permalink":"http://yoursite.com/2019/12/11/title/","excerpt":"","text":"一、hexo博客命令的使用说明1.hexo generate (hexo g)生成静态文件，会在当前目录下生成一个新的叫做public的文件夹。 2.hexo server (hexo s)启动本地web服务，用于博客的预览。访问localhost:4000就可以看到效果。 3.hexo deploy (hexo d)部署播客到平台上。 4.hexo new “postName”新建文章。(注意new和文件名之间的空格) 5.hexo new page &quot;pageName&quot;新建页面。 6.hexo clean删除已经生成的静态页面(即public文件夹)。 文件夹各内容的说明• node_modules：是依赖包• public：存放的是生成的页面• scaffolds：命令生成文章等的模板• source：用命令创建的各种文章• themes：主题• _config.yml：整个博客的配置• db.json：source解析所得到的• package.json：项目所需模块项目的配置信息 二、博客的发送新建、编辑文章-&gt;本地服务查看-&gt;删除之前的静态资源-&gt;生成新的静态资源-&gt;部署到github后两步可以直接合并完成：hexo d -g 1.新建、编辑文章可以在博客的文件夹里找到source-&gt;post直接邮件新建一个markdown格式的文件，可以通过上述的hexo new &quot;postname&quot;命令行创建。 就会发现文件夹_post里多了一个postname.md文件。文件的内容有： title: testNametestName 就是new时候的名字 date: 2019-12-1 14:41:17 默认带上新建文件夹的时间 tags:文章的标签，可自己添加分类这里就是写文章内容的地方了。 关于tags的格式以及categories：tags:- hexo- Markdowncategories: hexo注意tags下方要空两个空格，然后-也要空一个空格再写标签，而categories:也要空一格再写。 2.图片的引入在hexo new “file_name”之后，会生成一个filen_name文件夹，图片放在里面就可以使用了。![](title/timg.jpg) 3.引入链接链接的格式如下：[这是一个链接](https://www.runoob.com/markdown/md-link.html)这是一个链接 4.写入代码基本格式为: 12345678```C#include &lt;stdio.h&gt;int main()&#123;int i=1;printf(\"1\");return 0;&#125; 其中三个“`”符号后面的加的是语言的名称，只有加入才会有高亮，示例如下： 1234567#include &lt;stdio.h&gt;int main()&#123;int i=1;printf(\"1\");return 0;&#125;","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/tags/Markdown/"}]},{"title":"BLOG","slug":"aaa","date":"2019-12-08T14:40:25.000Z","updated":"2019-12-11T14:16:01.014Z","comments":true,"path":"2019/12/08/aaa/","link":"","permalink":"http://yoursite.com/2019/12/08/aaa/","excerpt":"","text":"This is my blog. ？？？","categories":[{"name":"xxx","slug":"xxx","permalink":"http://yoursite.com/categories/xxx/"}],"tags":[{"name":"tag1","slug":"tag1","permalink":"http://yoursite.com/tags/tag1/"},{"name":"tag2","slug":"tag2","permalink":"http://yoursite.com/tags/tag2/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-10-06T13:45:30.217Z","updated":"2019-10-06T13:45:30.217Z","comments":true,"path":"2019/10/06/hello-world/","link":"","permalink":"http://yoursite.com/2019/10/06/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}